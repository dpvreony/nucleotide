<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Basics.cs" company="DHGMS Solutions">
//   Licensed under GNU General Public License version 2 (GPLv2)
// </copyright>
// <summary>
//   Unit Tests for PropertyInfo classes
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace TestDhgms.NucleotideTest.Model.Info.PropertyInfo
{
    using System;

    using Xunit;

    /// <summary>
    /// Unit Tests for PropertyInfo classes
    /// </summary>
    public class PropertyInfoTests : TestDhgms.NucleotideTest.Model.Helper.TestBase
    {
<#
            string[] keywords =
            {
                // C#
                "abstract",
                "event",
                "new",
                "struct",
                "as",
                "explicit",
                "null",
                "switch",
                "base",
                "extern",
                "object",
                "this",
                "bool",
                "false",
                "operator",
                "throw",
                "break",
                "finally",
                "out",
                "true",
                "byte",
                "fixed",
                "override",
                "try",
                "case",
                "float",
                "params",
                "typeof",
                "catch",
                "for",
                "private",
                "uint",
                "char",
                "foreach",
                "protected",
                "ulong",
                "checked",
                "goto",
                "public",
                "unchecked",
                "class",
                "if",
                "readonly",
                "unsafe",
                "const",
                "implicit",
                "ref",
                "ushort",
                "continue",
                "in",
                "return",
                "using",
                "decimal",
                "int",
                "sbyte",
                "virtual",
                "default",
                "interface",
                "sealed",
                "volatile",
                "delegate",
                "internal",
                "short",
                "void",
                "do",
                "is",
                "sizeof",
                "while",
                "double",
                "lock",
                "stackalloc",
                "else",
                "long",
                "static",
                "enum",
                "namespace",
                "string",
                // VB
                "AddHandler",
                "AddressOf",
                "Alias",
                "And",
                "Ansi",
                "As",
                "Assembly",
                "Auto",
                "Base",
                "Boolean",
                "ByRef",
                "Byte",
                "ByVal",
                "Call",
                "Case",
                "Catch",
                "CBool",
                "CByte",
                "CChar",
                "CDate",
                "CDec",
                "CDbl",
                "Char",
                "CInt",
                "Class",
                "CLng",
                "CObj",
                "Const",
                "CShort",
                "CSng",
                "CStr",
                "CType",
                "Date",
                "Decimal",
                "Declare",
                "Default",
                "Delegate",
                "Dim",
                "Do",
                "Double",
                "Each",
                "Else",
                "ElseIf",
                "End",
                "Enum",
                "Erase",
                "Error",
                "Event",
                "Exit",
                "ExternalSource",
                "False",
                "Finalize",
                "Finally",
                "Float",
                "For",
                "Friend",
                "Function",
                "Get",
                "GetType",
                "Goto",
                "Handles",
                "If",
                "Implements",
                "Imports",
                "In",
                "Inherits",
                "Integer",
                "Interface",
                "Is",
                "Let",
                "Lib",
                "Like",
                "Long",
                "Loop",
                "Me",
                "Mod",
                "Module",
                "MustInherit",
                "MustOverride",
                "MyBase",
                "MyClass",
                "Namespace",
                "New",
                "Next",
                "Not",
                "Nothing",
                "NotInheritable",
                "NotOverridable",
                "Object",
                "On",
                "Option",
                "Optional",
                "Or",
                "Overloads",
                "Overridable",
                "Overrides",
                "ParamArray",
                "Preserve",
                "Private",
                "Property",
                "Protected",
                "Public",
                "RaiseEvent",
                "ReadOnly",
                "ReDim",
                "Region",
                "REM",
                "RemoveHandler",
                "Resume",
                "Return",
                "Select",
                "Set",
                "Shadows",
                "Shared",
                "Short",
                "Single",
                "Static",
                "Step",
                "Stop",
                "String",
                "Structure",
                "Sub",
                "SyncLock",
                "Then",
                "Throw",
                "To",
                "True",
                "Try",
                "TypeOf",
                "Unicode",
                "Until",
                "volatile",
                "When",
                "While",
                "With",
                "WithEvents",
                "WriteOnly",
                "Xor",
                "eval",
                "extends",
                "instanceof",
                "package",
                "var",
                // C++
                "__abstract",
                "__alignof",
                "__asm",
                "__assume",
                "__based",
                "__box",
                "__cdecl",
                "__declspec",
                "__delegate",
                "__event",
                "__except",
                "__fastcall",
                "__finally",
                "__forceinline",
                "__gc",
                "__hook",
                "__identifier",
                "__if_exists",
                "__if_not_exists",
                "__inline",
                "__int16",
                "__int32",
                "__int64",
                "__int8",
                "__interface",
                "__leave",
                "__m128",
                "__m128d",
                "__m128i",
                "__m64",
                "__multiple_inheritance",
                "__nogc",
                "__noop",
                "__pin",
                "__property",
                "__raise",
                "__sealed",
                "__single_inheritance",
                "__stdcall",
                "__super",
                "__thiscall",
                "__try",
                "__except",
                "__finally",
                "__try_cast",
                "__unaligned",
                "__unhook",
                "__uuidof",
                "__value",
                "__virtual_inheritance",
                "__w64",
                "__wchar_t",
                "wchar_t",
                "abstract",
                "array",
                "auto",
                "bool",
                "break",
                "case",
                "catch",
                "char",
                "class",
                "const",
                "const_cast",
                "continue",
                "decltype",
                "default",
                "delegate",
                "delete",
                "deprecated",
                "dllexport",
                "dllimport",
                "do",
                "double",
                "dynamic_cast",
                "else",
                "enum",
                "event",
                "explicit",
                "extern",
                "false",
                "finally",
                "float",
                "for",
                "each",
                "in",
                "friend",
                "friend_as",
                "gcnew",
                "generic",
                "goto",
                "if",
                "initonly",
                "inline",
                "int",
                "interface",
                "interior_ptr",
                "literal",
                "long",
                "mutable",
                "naked",
                "namespace",
                "new",
                "noinline",
                "noreturn",
                "nothrow",
                "novtable",
                "nullptr",
                "operator",
                "private",
                "property",
                "protected",
                "public",
                "ref",
                "register",
                "reinterpret_cast",
                "return",
                "safecast",
                "sealed",
                "selectany",
                "short",
                "signed",
                "sizeof",
                "static",
                "static_assert",
                "static_cast",
                "struct",
                "switch",
                "template",
                "this",
                "thread",
                "true",
                "try",
                "typedef",
                "typeid",
                "typename",
                "union",
                "unsigned",
                "using",
                "uuid",
                "value",
                "virtual",
                "void",
                "volatile",
                "while"
            };

int i = 1;
foreach(var keyword in keywords)
{
#>
        /// <summary>
        /// Tests to ensure exception is thrown when a keyword is passed as a name
        /// </summary>
        [Fact]
        public void ThrowExceptionsIfKeywordAsName<#=i++#>()
        {
            Assert.Throws<ArgumentException>(() => new Dhgms.Nucleotide.Model.Info.PropertyInfo.ClrBoolean(
                Dhgms.Nucleotide.Model.Info.CollectionType.None,
                "<#=keyword#>",
                "Description",
                false,
                true,
                null));
        }

<#
}
#>
<#
System.String[] items =
{
    "ClrBoolean"//,
    //"TriState"
};

foreach(String item in items)
{
#>
        /// <summary>
        /// Tests a <#=item#> with basic arguments passed into the constructor
        /// </summary>
        [Fact]
        public void Test<#=item#>ConstructorBasicArguments()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#>(
                CollectionType,
                Name,
                Description,
                Optional,
                true,
                null);

            Assert.Equal(CollectionType, instance.Collection);
            Assert.Equal(Name, instance.Name);
            Assert.Equal(Description, instance.Description);
            Assert.Equal(Optional, instance.Optional);
        }

<#
}#><#

System.Collections.Generic.Dictionary<System.String, System.String> complexItems = new System.Collections.Generic.Dictionary<System.String, System.String>();
complexItems.Add("ClrChar", "char");
complexItems.Add("ClrDateTime", "DateTime");

foreach(System.Collections.Generic.KeyValuePair<System.String, System.String> complexItem in complexItems)
{
#>
        /// <summary>
        /// Tests a <#=complexItem.Key#> with the min and max null, and allows the property to be optional\ nullable
        /// </summary>
        [Fact]
        public void Test<#=complexItem.Key#>GetMutatorBothNullsOptional()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = true;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                null,
                false,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=complexItem.Key#> with the min null, and allows the property to be optional\ nullable
        /// </summary>
        [Fact]
        public void Test<#=complexItem.Key#>GetMutatorMinNullOptional()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = true;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                <#=complexItem.Value#>.MaxValue,
                false,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=complexItem.Key#> with the max null, and allows the property to be optional\ nullable
        /// </summary>
        [Fact]
        public void Test<#=complexItem.Key#>GetMutatorMaxNullOptional()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = true;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#>(
                CollectionType,
                Name,
                Description,
                Optional,
                <#=complexItem.Value#>.MinValue,
                null,
                false,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=complexItem.Key#> with the min and max null
        /// </summary>
        [Fact]
        public void Test<#=complexItem.Key#>GetMutatorBothNulls()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                null,
                false,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=complexItem.Key#> with the min null
        /// </summary>
        [Fact]
        public void Test<#=complexItem.Key#>GetMutatorMinNull()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                <#=complexItem.Value#>.MaxValue,
                false,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=complexItem.Key#> with the max null
        /// </summary>
        [Fact]
        public void Test<#=complexItem.Key#>GetMutatorMaxNull()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=complexItem.Key#>(
                CollectionType,
                Name,
                Description,
                Optional,
                <#=complexItem.Value#>.MinValue,
                null,
                false,
                null);

            Console.Write(instance.GetMutator());
        }

<#
}

items = new System.String[]
{
    //"ClrString",
    "ClrDecimal",
    "ClrDouble",
    "ClrSingle",
    "Integer16",
    "Integer32",
    "Integer64",
    "UnsignedInteger8",
    "UnsignedInteger16",
    "UnsignedInteger32",
    "UnsignedInteger64"
};
foreach(String item in items)
{
#>
        /// <summary>
        /// Tests a <#=item#> with basic arguments passed into the constructor
        /// </summary>
        [Fact]
        public void Test<#=item#>ConstructorBasicArguments()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                null,
                true,
                null);

            Assert.Equal(CollectionType, instance.Collection);
            Assert.Equal(Name, instance.Name);
            Assert.Equal(Description, instance.Description);
            Assert.Equal(Optional, instance.Optional);
        }

        /// <summary>
        /// Tests a <#=item#> with the min and max null, and allows the property to be optional\ nullable
        /// </summary>
        [Fact]
        public void Test<#=item#>GetMutatorBothNullsOptional()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                null,
                true,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=item#> with the min null, and allows the property to be optional\ nullable
        /// </summary>
        [Fact]
        public void Test<#=item#>GetMutatorMinNullOptional()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                255,
                true,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=item#> with the max null, and allows the property to be optional\ nullable
        /// </summary>
        [Fact]
        public void Test<#=item#>GetMutatorMaxNullOptional()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#>(
                CollectionType,
                Name,
                Description,
                Optional,
                1,
                null,
                true,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=item#> with the min and max null
        /// </summary>
        [Fact]
        public void Test<#=item#>GetMutatorBothNulls()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                null,
                true,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=item#> with the min null
        /// </summary>
        [Fact]
        public void Test<#=item#>GetMutatorMinNull()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#>(
                CollectionType,
                Name,
                Description,
                Optional,
                null,
                255,
                true,
                null);

            Console.Write(instance.GetMutator());
        }

        /// <summary>
        /// Tests a <#=item#> with the max null
        /// </summary>
        [Fact]
        public void Test<#=item#>GetMutatorMaxNull()
        {
            const Dhgms.Nucleotide.Model.Info.CollectionType CollectionType = Dhgms.Nucleotide.Model.Info.CollectionType.GenericLinkedList;
            const string Name = "Name";
            const string Description = "Description";
            const bool Optional = false;

            Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#> instance = new Dhgms.Nucleotide.Model.Info.PropertyInfo.<#=item#>(
                CollectionType,
                Name,
                Description,
                Optional,
                1,
                null,
                true,
                null);

            Console.Write(instance.GetMutator());
        }

<#
}
#>
    }
}