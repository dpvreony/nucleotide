// --------------------------------------------------------------------------------------------------------------------
// <copyright file="EntityFrameworkHelpers.cs" company="DHGMS Solutions">
//   Licensed under GNU General Public License version 2 (GPLv2)
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
namespace Dhgms.Nucleotide.Generators
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    using Dhgms.Nucleotide.Model;
    using Dhgms.Nucleotide.PropertyInfo;

    /// <summary>
    ///     Helper for generating the Entity Framework helpers
    /// </summary>
    public class EntityFrameworkHelpers
    {
        #region Public Methods and Operators

        /// <summary>
        /// Entry point for generating the code
        /// </summary>
        /// <param name="mainNamespaceName">
        /// The main namespace
        /// </param>
        /// <param name="classes">
        /// Collection of classes to generate a helper for
        /// </param>
        /// <param name="suppressExceptionsAsCode">
        /// If an exception occurs instead of throwing the exception, they are output as code content. This is typically more useful in a transform environment so you can see the error in the affected file.
        /// </param>
        /// <returns>
        /// C# code
        /// </returns>
        public string Generate(string mainNamespaceName, List<Tuple<IEntityGenerationModel, string>> classes, bool suppressExceptionsAsCode)
        {
            try
            {
                if (classes == null)
                {
                    throw new ArgumentNullException("classes");
                }

                return this.DoGeneration(mainNamespaceName, classes);
            }
            catch (Exception e)
            {

                if (suppressExceptionsAsCode)
                {
                    return "#error " + e.ToString().Replace(System.Environment.NewLine, string.Empty);
                }

                throw;
            }
        }

        private string DoGeneration(string mainNamespaceName, List<Tuple<IEntityGenerationModel, string>> classes)
        {
            if (string.IsNullOrWhiteSpace(mainNamespaceName))
            {
                throw new ArgumentNullException("mainNamespaceName");
            }

            var sb = new StringBuilder();

            var noSubNamespace = from c in classes
                                 where string.IsNullOrWhiteSpace(c.Item1.SubNamespace)
                                 select c;

            this.DoSubNamespace(sb, mainNamespaceName, null, noSubNamespace);

            var subNamespaces = from c in classes
                                where !string.IsNullOrWhiteSpace(c.Item1.SubNamespace)
                                group c by c.Item1.SubNamespace
                                    into g
                                select g;

            foreach (var ns in subNamespaces)
            {
                this.DoSubNamespace(sb, mainNamespaceName, ns.Key, ns);
            }

            return sb.ToString();
        }

        private void DoSubNamespace(StringBuilder sb, string mainNamespaceName, string subNamespace, IEnumerable<Tuple<IEntityGenerationModel, string>> classes)
        {
            var fullyQualifiedNamespace = mainNamespaceName + ".Model.Helper.EntityFramework"
                                             + (!string.IsNullOrWhiteSpace(subNamespace)
                                                    ? "." + subNamespace
                                                    : null);

            sb.AppendLine("namespace " + fullyQualifiedNamespace);
            sb.AppendLine("{");
            sb.AppendLine("    using System;");
            sb.AppendLine("    using System.Data.Entity;");
            sb.AppendLine(string.Empty);
            sb.AppendLine(OldHelpers.GetAutoGeneratedWarning());

            this.DoOurMethodsRegion(sb, classes);

            sb.AppendLine("}");
        }

        #endregion

        #region Methods

        /// <summary>
        /// Generates the code that maps the class to a database table t
        /// </summary>
        /// <param name="sb">
        ///     The string builder to add the code to
        /// </param>
        /// <param name="entityInfo">
        ///     The information relating to the generation of the class
        /// </param>
        /// <param name="inheritingFullyQualifiedClass">
        /// The fully qualified class name for the EF inheriting class
        /// </param>
        private static void DoEntityFrameworkModelMethod(StringBuilder sb, IEntityGenerationModel entityInfo, string inheritingFullyQualifiedClass)
        {
            if (entityInfo == null)
            {
                throw new ArgumentNullException("entityInfo");
            }

            if (string.IsNullOrWhiteSpace(entityInfo.ClassName))
            {
                throw new ArgumentException("ClassName");
            }

            if (entityInfo.Properties == null)
            {
                throw new ArgumentException("Properties");
            }

            if (entityInfo.Properties.Count(p => p.IsKey) > 1)
            {
                throw new ArgumentException("Too many primary keys defined");
            }

            // currently not going to support list types in our EF mapping
            var baseProperties = entityInfo.BaseTypeEntityGenerationModel?.Properties;
            if ((baseProperties != null
                 && baseProperties.Any(baseProperty => baseProperty.Collection != CollectionType.None))
                || entityInfo.Properties.Any(property => property.Collection != CollectionType.None))
            {
                return;
            }

            string fullyQualifiedClassName = entityInfo.MainNamespaceName + ".Model."
                                             + (!string.IsNullOrWhiteSpace(entityInfo.SubNamespace)
                                                    ? entityInfo.SubNamespace + "."
                                                    : null) + entityInfo.ClassName;

            sb.AppendLine("/// <summary>");
            sb.AppendLine("/// Maps the information class to the entity framework model");
            sb.AppendLine("/// </summary>");
            sb.AppendLine("/// <param name=\"modelBuilder\">");
            sb.AppendLine("/// model builder object");
            sb.AppendLine("/// </param>");
            sb.AppendLine("/// <param name=\"schemaName\">");
            sb.AppendLine("/// The schema Name in the database");
            sb.AppendLine("/// </param>");
            sb.AppendLine("/// <param name=\"tableName\">");
            sb.AppendLine("/// The table Name in the database");
            sb.AppendLine("/// </param>");
            sb.AppendLine(
                "public void DoEntityFrameworkModel(DbModelBuilder modelBuilder, string schemaName, string tableName)");
            sb.AppendLine("{");
            sb.AppendLine("    if (modelBuilder == null)");
            sb.AppendLine("    {");
            sb.AppendLine("        throw new ArgumentNullException(\"modelBuilder\");");
            sb.AppendLine("    }");
            sb.AppendLine(string.Empty);
            sb.AppendLine("    if (tableName == null)");
            sb.AppendLine("    {");
            sb.AppendLine("        throw new ArgumentNullException(\"tableName\");");
            sb.AppendLine("    }");
            sb.AppendLine(string.Empty);

            foreach (PropertyInfoBase p in entityInfo.Properties.Where(p => p.IsKey))
            {
                sb.AppendLine(
                    "    modelBuilder.Entity<" + fullyQualifiedClassName + ">().HasKey(x => x." + p.Name + ");");
            }

            foreach (PropertyInfoBase p in entityInfo.Properties)
            {
                sb.Append(
                    "    modelBuilder.Entity<" + fullyQualifiedClassName + ">().Property(x => x." + p.Name + ").Is");
                sb.AppendLine(p.Optional ? "Optional();" : "Required();");
            }

            foreach (
                PropertyInfoBase p in entityInfo.Properties.Where(p => !string.IsNullOrWhiteSpace(p.AlternativeDatabaseColumnName)))
            {
                sb.AppendLine(
                    "    modelBuilder.Entity<" + fullyQualifiedClassName + ">().Property(x => x." + p.Name
                    + ").HasColumnName(\"" + p.AlternativeDatabaseColumnName + "\");");
            }

            if (string.IsNullOrWhiteSpace(inheritingFullyQualifiedClass))
            {
                sb.AppendLine("    modelBuilder.Entity<" + fullyQualifiedClassName + ">().ToTable(tableName, schemaName);");
            }
            else
            {
                sb.AppendLine("    modelBuilder.Entity<" + inheritingFullyQualifiedClass + ">().Map(m =>");
                sb.AppendLine("    {");
                sb.AppendLine("        m.MapInheritedProperties();");
                sb.AppendLine("        m.ToTable(tableName, schemaName);");
                sb.AppendLine("    });");
            }

            sb.AppendLine("}");
            sb.AppendLine(string.Empty);
        }

        /// <summary>
        /// Generates the code for the our methods region
        /// </summary>
        /// <param name="sb">
        /// StringBuilder to add the code to
        /// </param>
        /// <param name="classes">
        /// Collection of classes to generate helpers for
        /// </param>
        private void DoOurMethodsRegion(StringBuilder sb, IEnumerable<Tuple<IEntityGenerationModel, string>> classes)
        {
            foreach (var classInfo in classes)
            {
                var fullyQualifiedClassName = classInfo.Item1.MainNamespaceName + ".Model." + (!string.IsNullOrWhiteSpace(classInfo.Item1.SubNamespace) ? classInfo.Item1.SubNamespace + "." : null) + classInfo.Item1.ClassName;

                sb.AppendLine("    /// <summary>");
                sb.AppendLine("    /// Helper methods for using POCO and Entity Framework");
                sb.AppendLine("    /// </summary>");
                sb.AppendLine("    [System.CodeDom.Compiler.GeneratedCode]");
                sb.AppendLine("    public class " + classInfo.Item1.ClassName);
                sb.AppendLine("                : Dhgms.DataManager.Model.IEntityFramework<" + fullyQualifiedClassName + ">");
                sb.AppendLine("    {");

                DoEntityFrameworkModelMethod(sb, classInfo.Item1, classInfo.Item2);

                sb.AppendLine("    }");
            }
        }

        #endregion
    }
}