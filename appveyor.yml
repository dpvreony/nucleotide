version: 1.0.{build}
#branches:
#  only:
#  - master
image: Visual Studio 2017
configuration: Release
platform: Any CPU
assembly_info:
  patch: true
  file: '**\AssemblyInfo.*'
  assembly_version: '{version}'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}{localversionsuffix}'
init:
- ps: >-
    if ($env:APPVEYOR_REPO_BRANCH -ne 'master') {
      $env:localversionsuffix = '-' + $env:APPVEYOR_REPO_BRANCH
    }
before_build:
# If there's a newer build queued for the same PR, cancel this one
# taken from: https://raw.githubusercontent.com/tkelman/numpy/440e81ace36d65a7b62eec1a0460467f3dc97085/appveyor.yml

# patch vs2017 csproj format versions
# taken from: https://www.arthurrump.com/2017/03/17/visual-studio-2017-csproj-version-patching-in-appveyor/

- ps: |
    if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
            https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
            Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
            throw "There are newer queued builds for this pull request, failing early." }

    Invoke-Expression "dotnet restore src\Dhgms.Nucleotide.sln" 
build_script:
- ps: dotnet restore src\Dhgms.Nucleotide.sln
- ps: |
    $fileVersion = $Env:APPVEYOR_BUILD_VERSION
    #moving forward assembly version will be major.minor.0
    $assemblyVersion = $Env:APPVEYOR_BUILD_VERSION
    $informationalVersion = $Env:APPVEYOR_BUILD_VERSION + $env:localversionsuffix
    dotnet build src\Dhgms.Nucleotide.sln -c Release /p:FileVersion=$fileVersion /p:AssemblyVersion=$assemblyVersion /p:Version=$informationalVersion
    dotnet pack src\Dhgms.Nucleotide.sln /p:FileVersion=$fileVersion /p:AssemblyVersion=$assemblyVersion /p:Version=$informationalVersion
#after_build:
#- cmd: dotnet pack src\Dhgms.Nucleotide\Dhgms.Nucleotide.csproj
test_script:
- ps: |
    $openCoverConsole = (Get-ChildItem C:\Users\appveyor\.nuget\packages\opencover\*\Tools\OpenCover.Console.exe).FullName
    Write-Host "OpenCover : $openCoverConsole"
    $xunitConsole = (Get-ChildItem C:\Users\appveyor\.nuget\packages\xunit.runner.console\*\tools\xunit.console.exe).FullName
    Write-Host "xunit     : $xunitConsole"
    $unittestdll = (Get-ChildItem C:\projects\nucleotide\src\Dhgms.Nucleotide.UnitTests\bin\Release\netstandard*\Dhgms.Nucleotide.UnitTests.dll).FullName
    Write-Host "unit test : $unittestdll"
    $dotnetLocation = Get-Command "dotnet.exe"
    Write-Host "dotnet    : $dotnetLocation.Path"
    .$openCoverConsole -register:user -target:"$dotnetLocation.Path" -targetargs:"xunit $unittestdll -noshadow -appveyor" -returntargetcode -excludebyattribute:*.ExcludeFromCodeCoverage* -filter:"+[Dhgms*]*" -hideskipped:All -output:.\DhgmsNucleotide_coverage.xml
    "SET PATH=C:\\Python34;C:\\Python34\\Scripts;%PATH%"
    pip install codecov
    codecov -f "DhgmsNucleotide_coverage.xml"
artifacts:
- path: '*.nupkg'
  name: nuget
deploy:
- provider: NuGet
  server: https://www.myget.org/F/dhgms/api/v2/package
  api_key:
    secure: RErDVlA5kOT7ZT4maCrp4KE73pzZYaMz5T+OrDqRu2AObjUTaNNvTvRwEqlve/O+
  symbol_server: https://www.myget.org/F/dhgms/api/v2/package
- provider: NuGet
  api_key:
    secure: 8GpBZ6IHRM4AV4mP8qCqUgJi0NCHX17OlzbrEZRoDCE0s2ZwXHOeqMfIwrGaakg9
  on:
    APPVEYOR_REPO_BRANCH: Release

