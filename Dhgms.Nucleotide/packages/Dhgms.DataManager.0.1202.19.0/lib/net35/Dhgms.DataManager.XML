<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dhgms.DataManager</name>
    </assembly>
    <members>
        <member name="T:Dhgms.DataManager.Model.SearchFilterComparison.Base">
            <summary>
            Base class for a Search Filter Comparison
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.SearchFilterComparison.Base.CompareTo(Dhgms.DataManager.Model.SearchFilterComparison.Base)">
            <summary>
            Compares this object with another
            </summary>
            <param name="other">another object</param>
            <returns>0 if they match, otherwise non-zero</returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.BooleanExtensions">
            <summary>
            Helpers for the Boolean Data Type
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.BooleanExtensions.ParseYesNo(System.String)">
            <summary>
            Parses a Yes\No field into a boolean
            </summary>
            <param name="value">the value to parse</param>
            <returns>true \ false</returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.Application">
            <summary>
            Helper task for generic application tasks
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Application.LoadConfigFile``1">
            <summary>
            Loads the application settings
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.PossibleSqlInjectionException">
            <summary>
            A quick and dirty check has detected that there is possibly an SQL injection attempt
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PossibleSqlInjectionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PossibleSqlInjectionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PossibleSqlInjectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PossibleSqlInjectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PossibleSqlInjectionException.#ctor(System.Char)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.Email.NoRecipientsException">
            <summary>
            Thrown when you try to send an email without passing in any recipients
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Email.NoRecipientsException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Email.NoRecipientsException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Email.NoRecipientsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Email.NoRecipientsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.TriState">
            <summary>
            Tri-State Data Type
            </summary>
        </member>
        <member name="F:Dhgms.DataManager.Model.Info.TriState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Dhgms.DataManager.Model.Info.TriState.No">
            <summary>
            No
            </summary>
        </member>
        <member name="F:Dhgms.DataManager.Model.Info.TriState.Yes">
            <summary>
            Yes
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.ByteExtensions">
            <summary>
            Extension Methods for Bytes
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.ByteExtensions.BytesToHexString(System.Byte[])">
            <summary>
            Converts a byte string to hexadecimal
            </summary>
            <param name="value">Byte String to convert</param>
            <returns></returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowClrCharException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrCharException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrCharException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrCharException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrCharException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrCharException.#ctor(System.Char,System.Char)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowClrDateTimeException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDateTimeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDateTimeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDateTimeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDateTimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDateTimeException.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowClrDecimalException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDecimalException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDecimalException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDecimalException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDecimalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDecimalException.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowClrDoubleException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDoubleException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDoubleException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDoubleException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDoubleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrDoubleException.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowClrSingleException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrSingleException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrSingleException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrSingleException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrSingleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowClrSingleException.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowInteger16Exception">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger16Exception.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger16Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger16Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger16Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger16Exception.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowInteger32Exception">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger32Exception.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger32Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger32Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger32Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger32Exception.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowInteger64Exception">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger64Exception.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger64Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger64Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger64Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowInteger64Exception.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooLowUnsignedInteger8Exception">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowUnsignedInteger8Exception.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowUnsignedInteger8Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowUnsignedInteger8Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowUnsignedInteger8Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooLowUnsignedInteger8Exception.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.Database.EmptyResultSetException">
            <summary>
            The argument passed as a directory is in a bad format
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Database.EmptyResultSetException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Database.EmptyResultSetException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Database.EmptyResultSetException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Database.EmptyResultSetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Inward">
            <summary>
            Represents the Inward section of a UK Postcode
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Inward.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="inward">inward code to parse</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Inward.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Inward.IsValid">
            <summary>
            Whether the section of the postcode is valid
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Inward.Sector">
            <summary>
            Represents a postcode sector
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Inward.Unit">
            <summary>
            represents a postcode unit
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.ConfigurationElement.RunSet`1">
            <summary>
            Represents a run set inside the app config
            one of them will match the arguement on the command line
            A run set is a set of rules specific to an invidiual run of the program
            i.e. a runset of "monday" for a mondays scheduled run
            or "england" for english machines
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.ConfigurationElement.RunSet`1.IsReadOnly">
            <summary>
            Dictates whether the config is read only
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElement.RunSet`1.Name">
            <summary>
            The name of the run set
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.ReflectionExtensions">
            <summary>
            Methods that aid in reflection
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.ReflectionExtensions.GetClassesInNamespace(System.String)">
            <summary>
            
            </summary>
            <param name="fullyQualifiedNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.ReflectionExtensions.GetClassesInNamespace(System.String,System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="fullyQualifiedNamespace"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.ReflectionExtensions.LoadStringFromResource(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Loads a string from an embedded resource file
            </summary>
            <param name="assembly">The assembly containing the resource</param>
            <param name="resourceNamespace">Namespace where the resource file resides. Usually the application name</param>
            <param name="resourceFileName">The filename of the embedded resource</param>
            <returns>string from embedded resource file</returns>
            <remarks>
            This code is based on an answer on stack overflow
            http://stackoverflow.com/questions/576571/where-do-you-put-sql-statements-in-your-c-sharp-projects
            answer by: http://stackoverflow.com/users/13302/marc-s
            </remarks>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.StringTooShortException">
            <summary>
            The string passed in was longer than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooShortException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooShortException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooShortException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooShortException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooShortException.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.Directory.StringInBadFormatException">
            <summary>
            The argument passed as a directory is in a bad format
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Directory.StringInBadFormatException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Directory.StringInBadFormatException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Directory.StringInBadFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.Directory.StringInBadFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.ConfigurationElementCollection.BaseCollection`1">
            <summary>
            Base class for a Collection of Elements in a Config file
            </summary>
            <typeparam name="TConfigElement"></typeparam>
        </member>
        <member name="M:Dhgms.DataManager.Model.ConfigurationElementCollection.BaseCollection`1.CreateNewElement">
            <summary>
            Creates a new Element
            </summary>
            <returns>ConfigElement</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.ConfigurationElementCollection.BaseCollection`1.Add(System.Configuration.ConfigurationElement)">
            <summary>
            Adds an element to a collection
            </summary>
            <param name="element">element to add</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.ConfigurationElementCollection.BaseCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key
            </summary>
            <param name="element">element</param>
            <returns>key</returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElementCollection.BaseCollection`1.Item(System.Int32)">
            <summary>
            Returns a element from the collection
            </summary>
            <param name="index">0 based position in list</param>
            <returns></returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.Difference`1">
            <summary>
            Class for listing differences between 2 objects of the same information class
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.Base`1">
            <summary>
            Base class for all information classes
            Required in order for them to work with the DataManager
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.CompareTo(`0)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <return>
            0 if equal, otherwise non zero
            </return>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object
            </summary>
            <param name="other">other object to compare</param>
            <returns>0 if equal, otherwise non-0, depending on the rules of the CompareTo logic in the inheriting class</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.Equals(System.Object)">
            <summary>
            Checks if an object matches this one
            </summary>
            <param name="obj">An object</param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.op_Equality(Dhgms.DataManager.Model.Info.Base{`0},Dhgms.DataManager.Model.Info.Base{`0})">
            <summary>
            Check if 2 object are equal
            </summary>
            <param name="first">first object to compare</param>
            <param name="other">the other object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.op_Inequality(Dhgms.DataManager.Model.Info.Base{`0},Dhgms.DataManager.Model.Info.Base{`0})">
            <summary>
            Checks if 2 objects are NOT equal
            </summary>
            <param name="first">first object to compare</param>
            <param name="other">the other object to compare</param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.op_LessThan(Dhgms.DataManager.Model.Info.Base{`0},Dhgms.DataManager.Model.Info.Base{`0})">
            <summary>
            Checks if an object is less than another
            </summary>
            <param name="first">first object to compare</param>
            <param name="other">the other object to compare</param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.op_GreaterThan(Dhgms.DataManager.Model.Info.Base{`0},Dhgms.DataManager.Model.Info.Base{`0})">
            <summary>
            Checks if an object is greater than another
            </summary>
            <param name="first">first object to compare</param>
            <param name="other">the other object to compare</param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.Equals(`0)">
            <summary>
            Checks if the values of two objects are the same
            </summary>
            <param name="other">The other object to compare</param>
            <returns>True if they match, otherwise false</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.CompareCollection``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Compares lists to make sure they are the same
            </summary>
            <typeparam name="TListDataType">Data Type for the list collections</typeparam>
            <param name="first">First List</param>
            <param name="other">Second List</param>
            <returns>0 for match, otherwise non zero</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Converts a datareader record to a strongly typed object
            </summary>
            <param name="dataReader">The data reader containing the record</param>
            <returns>A strongly typed object</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.DoTableValidation">
            <summary>
            Checks a table to make sure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Base`1.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Base`1.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Difference`1.GetColumnNames">
            <summary>
            Gets a list of column names where the values are different
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Difference`1.Count">
            <summary>
            Returns the number of properties in an information class that differ
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.PermutationSet">
            <summary>
            Represents a set of permutations
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.PermutationSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.PermutationSet.Items">
            <summary>
            List of items to this set of permutations
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.Permutation">
            <summary>
            Helper for working out permutations
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Permutation.GetPermutations(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets the permutations of a list of items
            </summary>
            <param name="items">List</param>
            <returns>The permutations</returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.TextExtensions">
            <summary>
            Text Extension Methods
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.CompareCollection(System.String[],System.String[])">
            <summary>
            Compares an array of strings against another
            </summary>
            <param name="instance">first collection of strings</param>
            <param name="other">collection of strings to compare against</param>
            <returns>0 if matches, otherswise non-0</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.IsVowel(System.Char)">
            <summary>
            checks if a character is a roman vowel
            </summary>
            <param name="input"></param>
            <returns>true for vowel, otherwise false</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.Contains(System.String,System.Char)">
            <summary>
            Indicates if a character is contained in a string
            </summary>
            <param name="input"></param>
            <param name="check"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.ContainsAny(System.String,System.Char[])">
            <summary>
            Indicates if any of a series of characters is contained in a string
            </summary>
            <param name="input"></param>
            <param name="checks"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.ContainsSymbol(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.Count(System.String,System.Char)">
            <summary>
            Checks to find the number of times a character occurs in a string
            </summary>
            <param name="input"></param>
            <param name="check"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.CountEquals(System.String,System.Char,System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="check"></param>
            <param name="numberExpected"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.In(System.Char,System.Char[])">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="checks"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.In(System.String,System.String[],System.StringComparison)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="checks"></param>
            <param name="stringComparison"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.IsInteger(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.IsNumeric(System.String)">
            <summary>
            Returns if a string represents a number
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.IsValidPostcodeFormat(System.String)">
            <summary>
            Checks if a postcode is valid
            </summary>
            <param name="postcode"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.GetNumberFromStart(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.RemoveCharsFromStart(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="toRemove"></param>
            <param name="ignoreWhiteSpace">whether to ignore whitespace</param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets the first x characters of a string
            </summary>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets the last x characters of a string
            </summary>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.GetSurnameKey(System.String)">
            <summary>
            Gets the surname key for the specified text
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.GetHouseNumberAndStreetMissingSpace(System.String)">
            <summary>
            Checks to see if there is a space missing between the house number and first word of street name
            i.e. 1MAIN STREET
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.TextExtensions.IsNumeralSuffix(System.Int32,System.String)">
            <summary>
            checks if a token matches the ordinal suffix for a number
            </summary>
            <param name="number"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.FailedToGetResourceStreamException">
            <summary>
            We failed to get the resource stream. Used when loading a resource file.
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.FailedToGetResourceStreamException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.FailedToGetResourceStreamException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.FailedToGetResourceStreamException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.FailedToGetResourceStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.Number">
            <summary>
            Helper methods for numbers
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Number.In(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if a number is in a list of numbers
            </summary>
            <param name="input">number to check for</param>
            <param name="collection">list of numbers to check</param>
            <returns>true if found, otherwise false</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Number.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wether a number is between or equal to the minimum or maximum number
            </summary>
            <param name="input"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Number.Inside(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wether the number is between the min and max, but not equal to one of them
            </summary>
            <param name="input">Number to check</param>
            <param name="min">Minimum Number</param>
            <param name="max">Maximum Number</param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Number.GetOrdinalSuffix(System.Int32)">
            <summary>
            gets the ordinal suffix for a number
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.UnexpectedFileFormatException">
            <summary>
            The string passed in was longer than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.UnexpectedFileFormatException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.UnexpectedFileFormatException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.UnexpectedFileFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.UnexpectedFileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.ViewFilter`1">
            <summary>
            Base class for the View Filter.
            </summary>
            <typeparam name="TInheritingType">Class that is inheriting this base class</typeparam>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.ViewFilter`1.GetSelectedColumnNames">
            <summary>
            Gets a comma separated list of column names
            </summary>
            <returns>a comma separated list of column names</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.ViewFilter`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pageNumber">Number of the page to show</param>
            <param name="pageSize">Size of the pages</param>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.ViewFilter`1.PageNumber">
            <summary>
            The page number to be viewed
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.ViewFilter`1.PageSize">
            <summary>
            Size of the pages
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Outward">
            <summary>
            Represents the outward section of a UK Postcode
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Outward.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Outward.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="district"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Outward.ToString">
            <summary>
            formats the postcode section as a string
            </summary>
            <returns>formatted outward postcode section</returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Outward.Area">
            <summary>
            Represents the area of a postcode
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Outward.District">
            <summary>
            Represents the district of a postcode
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Outward.IsValid">
            <summary>
            Whether the section of the postcode is valid
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.ConfigurationElement.InternetServer">
            <summary>
            Configuration Element Representing the connection to a server
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.ConfigurationElement.InternetServer.IsReadOnly">
            <summary>
            Dictates whether the config is read only
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElement.InternetServer.HostName">
            <summary>
            Hostname of the server
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElement.InternetServer.Port">
            <summary>
            port of the server, if not using the protocol default
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElement.InternetServer.RequestPath">
            <summary>
            The path of the request
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElement.InternetServer.UserName">
            <summary>
            Username for the connection, if needed
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElement.InternetServer.Password">
            <summary>
            Password for the connection, if needed
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Controller.CommandLine`1">
            <summary>
            Base class for parsing command line arguements
            </summary>
            <typeparam name="TCommandLineSettings"></typeparam>
        </member>
        <member name="M:Dhgms.DataManager.Controller.CommandLine`1.Parse(System.String[])">
            <summary>
            Entry point for parsing the command line arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Dhgms.DataManager.Controller.CommandLine`1.GetIsSingleArgumentSpecified(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Checks if a switch has been specified on the command line
            </summary>
            <param name="argCollection">command line arguments</param>
            <param name="parameter">The switch to check for</param>
            <returns>whether the switch has been specified</returns>
        </member>
        <member name="M:Dhgms.DataManager.Controller.CommandLine`1.GetArePairArgumentsSpecified(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            
            </summary>
            <returns>whether the switch has been specified</returns>
        </member>
        <member name="P:Dhgms.DataManager.Controller.CommandLine`1.CommandLineSettings">
            <summary>
            Command Line Settings Information
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Controller.CommandLine`1.WantsHelp">
            <summary>
            Checks if /? has been specified on the command line
            </summary>
            <returns>whether /? has been specified</returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.EmailExtensions">
            <summary>
            Helper methods for email addresses
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.EmailExtensions.GetMailAddressCollection(Dhgms.DataManager.Model.ConfigurationElementCollection.EmailRecipientCollection)">
            <summary>
            Gets a collection of email addresses from an email recipient collection from a config file
            </summary>
            <param name="recipients"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.EmailExtensions.SendEmail(System.String,System.Net.Mail.MailAddress,System.Net.Mail.MailAddressCollection,System.Net.Mail.MailAddressCollection,System.Net.Mail.MailAddressCollection,System.String,System.String,System.Net.Mail.Attachment,System.Boolean)">
            <summary>
            Wrapper for sending an email with a file attachment
            </summary>
            <param name="hostName"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="cc"></param>
            <param name="bcc"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachment"></param>
            <param name="isHtml">Whether the email body is HTML</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.Database.MSSql10">
            <summary>
            MS SQL Server 10 (2008) Helper methods for Database connections
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.Database.Base`1">
            <summary>
            Base class for database helper methods
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.CheckForPossibleSqlInjection(System.String)">
            <summary>
            Checks for possible SQL injection attempts. Isn't fully fool proof.  Responsibility needs to be with the caller to the library.
            </summary>
            <param name="sqlCommand"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.ProcessNonQuery(System.String,System.String,`0[],System.Boolean)">
            <summary>
            Wrapper for processing a non query SQL command
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to Execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.ExecuteNonQueryStoredProcedure(System.String,System.String,`0[],System.Boolean)">
            <summary>
            Executes a Non query Stored Procedure
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="procedureName">The stored procedure to call</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.GetRecordCount(System.String,System.String)">
            <summary>
            Gets the number of records in a table
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="table">The table</param>
            <returns>Number of records in the table</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.GetBoolean(System.String,System.String,`0[],System.Boolean)">
            <summary>
            Gets a boolean from a scalar query
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relevant to the query</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>Date or null</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.GetDate(System.String,System.String,`0[],System.Boolean)">
            <summary>
            Gets a date from a scalar query without parameters
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relevant to the query</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>Date or null</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.GetInteger32(System.String,System.String,`0[],System.Boolean)">
            <summary>
            Gets an integer from a scalar query without parameters
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relevant to the query</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>int</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.GetSingleRecord``1(System.String,System.String,`0[],System.Boolean)">
            <summary>
            Gets a strongly typed object that represents a record
            </summary>
            <typeparam name="TInfoClass">The data type to convert the data to</typeparam>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>A strongly typed object</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.GetStronglyTypedCollection``1(System.String,System.String,`0[],System.Boolean)">
            <summary>
            Gets a strongly typed object that represents a record
            </summary>
            <typeparam name="TInfoClass">The data type to convert the data to</typeparam>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>A strongly typed object</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.ActOnDataReader(System.String,System.String,`0[],System.Func{System.Data.Common.DbDataReader,System.Int32},System.Boolean)">
            <summary>
            Opens a data reader then uses an action to process it
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="dataReaderAction">The method that is going to use the data reader</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.GetStrings(System.String,System.String,`0[],System.Boolean)">
            <summary>
            Gets a collection of strings from a select
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>collection of strings</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.GetTableExists(System.String,System.String,System.String,System.String)">
            <summary>
            checks if a table exists in database
            </summary>
            <param name="dbConnectionString"></param>
            <param name="databaseName"></param>
            <param name="schema"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.TruncateTable(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbConnectionString"></param>
            <param name="databaseName"></param>
            <param name="schema"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.TruncateTable(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbConnectionString"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.ShrinkFile(System.String,System.String)">
            <summary>
            Shrinks a database file
            </summary>
            <param name="dbConnectionString">Database connection string</param>
            <param name="fileName">file name to shrink</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.Base`1.ShrinkFiles(System.String)">
            <summary>
            Shrink all files used for a database
            </summary>
            <param name="dbConnectionString">Database connection string</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.ProcessNonQuery(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Wrapper for processing a non query SQL command
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to Execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.ExecuteNonQueryStoredProcedure(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Executes a Non query Stored Procedure
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="procedureName">The stored procedure to call</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.GetRecordCount(System.String,System.String)">
            <summary>
            Gets the number of records in a table
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="table">The table</param>
            <returns>Number of records in the table</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.GetBoolean(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Gets a boolean from a scalar query
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relevant to the query</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>Date or null</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.GetDate(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Gets a date from a scalar query without parameters
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relevant to the query</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>Date or null</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.GetInteger32(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Gets an integer from a scalar query without parameters
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relevant to the query</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>int</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.GetSingleRecord``1(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Gets a strongly typed object that represents a record
            </summary>
            <typeparam name="TInfoClass">The data type to convert the data to</typeparam>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>A strongly typed object</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.GetStronglyTypedCollection``1(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Gets a strongly typed object that represents a record
            </summary>
            <typeparam name="TInfoClass">The data type to convert the data to</typeparam>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>A strongly typed object</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.ActOnDataReader(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Func{System.Data.Common.DbDataReader,System.Int32},System.Boolean)">
            <summary>
            Opens a data reader then uses an action to process it
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="dataReaderAction">The method that is going to use the data reader</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.GetStrings(System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean)">
            <summary>
            Gets a collection of strings from a select
            </summary>
            <param name="dbConnectionString">Database Connection String</param>
            <param name="sqlCommand">Command to execute</param>
            <param name="parameters">Collection of parameters relating to the command</param>
            <param name="assumeSqlSafe">Whether to skip the SQL injection safety check.  Use only if you know the code you are passing in is safe and contains a quoted string that is preventing it passing the saftey check</param>
            <returns>collection of strings</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.GetTableExists(System.String,System.String,System.String,System.String)">
            <summary>
            checks if a table exists in database
            </summary>
            <param name="dbConnectionString"></param>
            <param name="databaseName"></param>
            <param name="schema"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.TruncateTable(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbConnectionString"></param>
            <param name="databaseName"></param>
            <param name="schema"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.TruncateTable(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbConnectionString"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.ShrinkFile(System.String,System.String)">
            <summary>
            Shrinks a database file
            </summary>
            <param name="dbConnectionString">Database connection string</param>
            <param name="fileName">file name to shrink</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.Database.MSSql10.ShrinkFiles(System.String)">
            <summary>
            Shrink all files used for a database
            </summary>
            <param name="dbConnectionString">Database connection string</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighClrCharException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrCharException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrCharException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrCharException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrCharException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrCharException.#ctor(System.Char,System.Char)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighClrDateTimeException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDateTimeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDateTimeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDateTimeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDateTimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDateTimeException.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighClrDecimalException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDecimalException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDecimalException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDecimalException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDecimalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDecimalException.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighClrDoubleException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDoubleException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDoubleException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDoubleException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDoubleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrDoubleException.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighClrSingleException">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrSingleException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrSingleException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrSingleException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrSingleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighClrSingleException.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighInteger16Exception">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger16Exception.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger16Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger16Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger16Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger16Exception.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighInteger32Exception">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger32Exception.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger32Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger32Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger32Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger32Exception.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighInteger64Exception">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger64Exception.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger64Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger64Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger64Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighInteger64Exception.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.NumberTooHighUnsignedInteger8Exception">
            <summary>
            The number passed in was higher than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighUnsignedInteger8Exception.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighUnsignedInteger8Exception.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighUnsignedInteger8Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighUnsignedInteger8Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.NumberTooHighUnsignedInteger8Exception.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.ConfigurationSection.ProviderSection">
            <summary>
            XML Configuration Section for Providers
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationSection.ProviderSection.Providers">
            <summary>
            A collection of registered providers.
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationSection.ProviderSection.DefaultProvider">
            <summary>
            The name of the default provider
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.ConfigurationElement.EmailRecipient">
            <summary>
            Represents an Email Recipient in a config file
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.ConfigurationElement.EmailRecipient.IsReadOnly">
            <summary>
            Dictates whether the config is read only
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElement.EmailRecipient.Name">
            <summary>
            The name of the run set
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.ConfigurationElement.EmailRecipient.Value">
            <summary>
            The name of the run set
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.ConfigurationElementCollection.EmailRecipientCollection">
            <summary>
            Represents a collection of Email Recipients in a Config File
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.ConfigurationElementCollection.EmailRecipientCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key
            </summary>
            <param name="element">element</param>
            <returns>key</returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Provider.Base">
            <summary>
            Base class for providers
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Provider.Base.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Provider.Base.OnInitialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="T:Dhgms.DataManager.Model.ProviderCollection.BaseCollection`1">
            <summary>
            Base class for Provider Collections
            </summary>
            <typeparam name="TProviderClass">The Provider Class</typeparam>
        </member>
        <member name="P:Dhgms.DataManager.Model.ProviderCollection.BaseCollection`1.Item(System.String)">
            <summary>
            Gets a provider by its name.
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.DateExtensions">
            <summary>
            Helper methods for the Date datatype
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.DateExtensions.GetDaysUpTo(System.DateTime,System.DateTime)">
            <summary>
            Gets all dates including and between 2 dates
            </summary>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <returns></returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.SearchFilter.Base`1">
            <summary>
            Base class for the Search Filter.  This class is literally a placeholder for generic constraint clauses
            </summary>
            <typeparam name="TInheritingType">The class that is inheriting this base class</typeparam>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full">
            <summary>
            Represents a UK PostCode
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.#ctor">
            <summary>
            Null Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.#ctor(Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full)">
            <summary>
            Copy constructor
            </summary>
            <param name="full"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.#ctor(Dhgms.DataManager.Model.Info.Raw.GBPostcode.Outward,Dhgms.DataManager.Model.Info.Raw.GBPostcode.Inward)">
            <summary>
            
            </summary>
            <param name="outward"></param>
            <param name="inward"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="postcode"></param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.ToString">
            <summary>
            Returns the formatted postcode
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.Outward">
            <summary>
            The outward section of the UK PostCode
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.Inward">
            <summary>
            The inward section of the UK Postcode
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.IsValid">
            <summary>
            Whether the Postcode is valid
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.Raw.GBPostcode.Full.SectorCode">
            <summary>
            returns the sector code
            e.g. CT20 1
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Info.CommandLineSettings">
            <summary>
            Represents the base command line settings
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.CompareTo(Dhgms.DataManager.Model.Info.CommandLineSettings)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <return>
            0 if equal, otherwise non zero
            </return>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.Equals(Dhgms.DataManager.Model.Info.CommandLineSettings)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="wantsHelp">Indictates the user wants the help info displayed</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Info.CommandLineSettings.GetDifferences(Dhgms.DataManager.Model.Info.CommandLineSettings)">
            <summary>
            Checks this instance against another to see where there are differences
            </summary>
            <param name="other">other instance to compare</param>
            <returns>summary of where there are differences</returns>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.CommandLineSettings.WantsHelp">
            <summary>
            Indictates the user wants the help info displayed
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Info.CommandLineSettings.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Difference.CommandLineSettings">
            <summary>
            Represents the base command line settings
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.CompareTo(Dhgms.DataManager.Model.Difference.CommandLineSettings)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <return>
            0 if equal, otherwise non zero
            </return>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.Equals(Dhgms.DataManager.Model.Difference.CommandLineSettings)">
            <summary>
            Checks if the current instance matches another of the same type
            </summary>
            <param name="other">object to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="wantsHelp">Indictates the user wants the help info displayed</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.GetHashCode">
            <summary>
            Gets the hash code for the object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.GetStronglyTypedObjectFromDataReaderRow(System.Data.Common.DbDataReader)">
            <summary>
            Get Strongly Typed Object from a data reader
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.DoTableValidation">
            <summary>
            Checks a table to ensure it meets the required schema
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.ToStringArray">
            <summary>
            Gets a collection of string data for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.GetDataColumns">
            <summary>
            Gets a collection of data columns representing the type
            </summary>
            <returns>a collection of strings representing the data record</returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Difference.CommandLineSettings.GetColumnNames">
            <summary>
            Gets the names of the columns that are different
            </summary>
            <return>
            list of names of the columns that are different
            </return>
        </member>
        <member name="P:Dhgms.DataManager.Model.Difference.CommandLineSettings.WantsHelp">
            <summary>
            Indictates the user wants the help info displayed
            </summary>
        </member>
        <member name="P:Dhgms.DataManager.Model.Difference.CommandLineSettings.Count">
            <summary>
            Gets the number of properties that are different
            </summary>
            <return>
            the number of properties that are different
            </return>
        </member>
        <member name="P:Dhgms.DataManager.Model.Difference.CommandLineSettings.HeaderRecord">
            <summary>
            Gets a header record for use for something like a CSV file
            </summary>
            <returns>a collection of strings representing the header record</returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.CryptographyExtensions">
            <summary>
            Helper for cryptography
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.CryptographyExtensions.CreateKey(System.Int32)">
            <summary>
            Generates a random key
            </summary>
            <param name="numberOfBytes">length of the key in bytes</param>
            <returns></returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.EnumerationValueNotSupportedException">
            <summary>
            Exception for when the enumeration value isn't supported, usually in a switch statement
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.EnumerationValueNotSupportedException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.EnumerationValueNotSupportedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.EnumerationValueNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.EnumerationValueNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.Helper.File">
            <summary>
            Helper methods for dealing with File related operations
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.File.GetFormattedPath(System.String)">
            <summary>
            ensures a path is formatted with the \ at the end
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dhgms.DataManager.Model.Helper.File.GetFullyQualifiedPath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.StringTooLongException">
            <summary>
            The string passed in was longer than the allowed maximum
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooLongException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooLongException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooLongException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooLongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.StringTooLongException.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Dhgms.DataManager.Model.Exception.PostcodeBadFormatException">
            <summary>
            The Post Code is in a bad format
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PostcodeBadFormatException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PostcodeBadFormatException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PostcodeBadFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Dhgms.DataManager.Model.Exception.PostcodeBadFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:Dhgms.DataManager.Model.ConfigurationElementCollection.RunSetCollection`1">
            <summary>
            Represents a collection of runsets in the app config
            based upon http://blog.newslacker.net/2008/02/net-20-custom-configuration-sections.html
            </summary>
        </member>
        <member name="M:Dhgms.DataManager.Model.ConfigurationElementCollection.RunSetCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key
            </summary>
            <param name="element">element</param>
            <returns>key</returns>
        </member>
    </members>
</doc>
