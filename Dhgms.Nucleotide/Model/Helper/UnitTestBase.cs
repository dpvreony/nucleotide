// --------------------------------------------------------------------------------------------------------------------
// <copyright file="UnitTestBase.cs" company="DHGMS Solutions">
//   Licensed under GNU General Public License version 2 (GPLv2)
// </copyright>
// <summary>
//   Base class for generating unit tests
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace Dhgms.Nucleotide.Model.Helper
{
    using System;
    using System.Linq;
    using System.Text;

    using Dhgms.Nucleotide.Model.Info.PropertyInfo;

    /// <summary>
    /// Base class for generating unit tests
    /// </summary>
    public abstract class UnitTestBase
    {
        /// <summary>
        /// Entry point for generating the code
        /// </summary>
        /// <param name="mainNamespaceName">
        /// The main namespace
        /// </param>
        /// <param name="subNamespace">
        /// The sub namespace, if any
        /// </param>
        /// <param name="className">
        /// The class name
        /// </param>
        /// <param name="classRemarks">
        /// Remarks for the class
        /// </param>
        /// <param name="properties">
        /// Properties of the info class
        /// </param>
        /// <param name="baseClassName">
        /// The name of the base class
        /// </param>
        /// <param name="baseClassProperties">
        /// The properties of the base class
        /// </param>
        /// <returns>
        /// C# code
        /// </returns>
        public string Generate(
            string mainNamespaceName,
            string subNamespace,
            string className,
            string classRemarks,
            Base[] properties,
            string baseClassName,
            Base[] baseClassProperties)
        {
            if (string.IsNullOrWhiteSpace(mainNamespaceName))
            {
                throw new ArgumentNullException("mainNamespaceName");
            }

            if (string.IsNullOrWhiteSpace(className))
            {
                throw new ArgumentNullException("className");
            }

            if (string.IsNullOrWhiteSpace(classRemarks))
            {
                throw new ArgumentNullException("classRemarks");
            }

            if (properties == null)
            {
                throw new ArgumentNullException("properties");
            }

            if (properties.Count(p => p.IsKey) > 1)
            {
                throw new ArgumentException("Too many primary keys defined");
            }

            var sb = new StringBuilder();

            sb.AppendLine(
                "namespace " + mainNamespaceName + ".Model." + this.ClassTypeName
                + ((!string.IsNullOrEmpty(subNamespace)) ? "." + subNamespace : null));
            sb.AppendLine("{");
            sb.AppendLine("        using System;");
            sb.AppendLine("        using System.ComponentModel.DataAnnotations;");
            sb.AppendLine("        using System.Data.Entity;");
            sb.AppendLine("        using System.Diagnostics;");
            sb.AppendLine("        using System.Diagnostics.CodeAnalysis;");
            sb.AppendLine("        using System.Runtime.Serialization;");
            sb.AppendLine("        using System.Xml;");
            sb.AppendLine("        using System.Xml.Linq;");
            sb.AppendLine(string.Empty);
            sb.AppendLine("        using NUnit.Framework;");
            sb.AppendLine(string.Empty);
            sb.AppendLine(Common.GetAutoGeneratedWarning());
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// " + classRemarks);
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        [TestFixture]");
            sb.AppendLine("        public class " + className + this.GetClassSuffix() + "Test");
            sb.AppendLine("        {");

            this.DoConstructorMethod(sb, className, properties, baseClassName, baseClassProperties);
            //this.DoDisposeMethod(sb, properties, baseClassName);
            //this.DoPropertiesRegion(sb, properties, baseClassProperties);
            //this.DoIComparableRegion(sb, className, properties, baseClassName, baseClassProperties);

            //sb.Append(Common.GetIEquatableRegion(className + this.GetClassSuffix(), baseClassName, baseClassProperties));

            //this.DoOurMethodsRegion(sb, mainNamespaceName, subNamespace, className, properties, baseClassName, baseClassProperties);

            sb.AppendLine("    }");
            sb.AppendLine("}");

            return sb.ToString();
        }

        /// <summary>
        /// The do constructor method.
        /// </summary>
        /// <param name="sb">
        /// The String Builder to add the code to
        /// </param>
        /// <param name="className">
        /// The class name
        /// </param>
        /// <param name="properties">
        /// Properties of the info class
        /// </param>
        /// <param name="baseClassName">
        /// The name of the base class
        /// </param>
        /// <param name="baseClassProperties">
        /// The properties of the base class
        /// </param>
        protected virtual void DoConstructorMethod(
            StringBuilder sb, string className, Base[] properties, string baseClassName, Base[] baseClassProperties)
        {
            // Default Constructor
            sb.AppendLine("            [TestFixture]");
            sb.AppendLine("            public class DefaultConstructorMethod");
            sb.AppendLine("            {");
            this.DoDummyTest(sb, 4);
            sb.AppendLine("                [Test]");
            sb.AppendLine("                public void ShouldSucceed()");
            sb.AppendLine("                {");
            sb.AppendLine("                    var instance = new " + baseClassName + "();");
            sb.AppendLine("                    Assert.NotNull(instance);");

            // todo: check default value of each property
            sb.AppendLine("                }");
            sb.AppendLine("            }");
            sb.AppendLine(string.Empty);

            // Copy Constructor
            sb.AppendLine("            [TestFixture]");
            sb.AppendLine("            public class CopyConstructorMethod");
            sb.AppendLine("            {");
            this.DoDummyTest(sb, 3);
            sb.AppendLine("                [Test]");
            sb.AppendLine("                public void ArgumentNull()");
            sb.AppendLine("                {");
            sb.AppendLine("                    Assert.Throws<ArgumentNullException>(new " + baseClassName + "(null));");
            sb.AppendLine("                }");
            sb.AppendLine(string.Empty);
            sb.AppendLine("                [Test]");
            sb.AppendLine("                public void ShouldSucceed()");
            sb.AppendLine("                {");
            sb.AppendLine("                    var initial = new " + baseClassName + "();");
            sb.AppendLine("                    var instance = new " + baseClassName + "(initial);");
            sb.AppendLine("                    Assert.NotNull(instance);");
            sb.AppendLine("                }");
            sb.AppendLine("            }");
            sb.AppendLine(string.Empty);
        }

        private void DoDummyTest(StringBuilder sb, int indentCount)
        {
            sb.AppendLine(Common.GetTabs(indentCount) + "[Test]");
            sb.AppendLine(Common.GetTabs(indentCount) + "public void Dummy()");
            sb.AppendLine(Common.GetTabs(indentCount) + "{");
            sb.AppendLine(Common.GetTabs(indentCount + 1) + "Assert.True(true);");
            sb.AppendLine(Common.GetTabs(indentCount) + "}");
        }

        /// <summary>
        ///     Gets the class suffix
        /// </summary>
        /// <returns>
        ///     the class suffix
        /// </returns>
        protected abstract string GetClassSuffix();

        /// <summary>
        /// Gets the type of class being produced (i.e. info, difference, view filter, search filter)
        /// </summary>
        protected string ClassTypeName { get; private set; }
    }
}
