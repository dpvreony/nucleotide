// --------------------------------------------------------------------------------------------------------------------
// <copyright file="AdoNetHelpers.cs" company="DHGMS Solutions">
//   Licensed under GNU General Public License version 2 (GPLv2)
// </copyright>
// <summary>
//   Generator for ADO.NET helpers
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace Dhgms.Nucleotide.Model.Helper
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    using Dhgms.Nucleotide.Model.Info;
    using Dhgms.Nucleotide.Model.Info.Interface;
    using Dhgms.Nucleotide.Model.Info.PropertyInfo;

    /// <summary>
    /// Generator for ADO.NET helpers
    /// </summary>
    public class AdoNetHelpers
    {
        /// <summary>
        /// Entry point for generating the code
        /// </summary>
        /// <param name="mainNamespaceName">
        /// The main namespace
        /// </param>
        /// <param name="subNamespace">
        /// The sub namespace, if any
        /// </param>
        /// <param name="classes">
        /// Collection of classes to generate a helper for
        /// </param>
        /// <returns>
        /// C# code
        /// </returns>
        public string Generate(
            string mainNamespaceName,
            string subNamespace,
            List<IClassGenerationParameters> classes)
        {
            if (string.IsNullOrWhiteSpace(mainNamespaceName))
            {
                throw new ArgumentNullException("mainNamespaceName");
            }

            var sb = new StringBuilder();

            sb.AppendLine("namespace " + mainNamespaceName + ".Model.Helper.AdoNet");
            sb.AppendLine("{");
            sb.AppendLine("    using System;");
            sb.AppendLine("    using System.ComponentModel.DataAnnotations;");
            sb.AppendLine("    using System.Data.Entity;");
            sb.AppendLine("    using System.Diagnostics;");
            sb.AppendLine("    using System.Diagnostics.CodeAnalysis;");
            sb.AppendLine("    using System.Runtime.Serialization;");
            sb.AppendLine("    using System.Xml;");
            sb.AppendLine("    using System.Xml.Linq;");
            sb.AppendLine(string.Empty);
            sb.AppendLine(Common.GetAutoGeneratedWarning());

            this.DoOurMethodsRegion(sb, classes);

            sb.AppendLine("}");

            return sb.ToString();
        }

        /// <summary>
        /// The do get ordinals.
        /// </summary>
        /// <param name="sb">
        /// The String Builder to add the code to
        /// </param>
        /// <param name="properties">
        /// Properties of the info class
        /// </param>
        protected static void DoGetOrdinals(StringBuilder sb, Base[] properties)
        {
            foreach (Base pi in properties)
            {
                var name = !string.IsNullOrWhiteSpace(pi.AlternativeDatabaseColumnName)
                               ? pi.AlternativeDatabaseColumnName
                               : pi.Name;
                sb.AppendLine(
                    "            var " + Common.GetVariableName(pi.Name) + "Ordinal = dataReader.GetOrdinal(\""
                    + name + "\");");
            }
        }

        /// <summary>
        /// The do get data columns method.
        /// </summary>
        /// <param name="sb">
        /// The String Builder to add the code to
        /// </param>
        /// <param name="classInfo">
        /// The class Info.
        /// </param>
        protected void DoGetDataColumnsMethod(StringBuilder sb, IClassGenerationParameters classInfo)
        {
            sb.AppendLine("            /// <summary>");
            sb.AppendLine("            /// Gets a collection of data columns representing the type");
            sb.AppendLine("            /// </summary>");
            sb.AppendLine("            /// <returns>a collection of strings representing the data record</returns>");
            sb.AppendLine("            public override System.Data.DataColumn[] GetDataColumns()");
            sb.AppendLine("            {");
            sb.AppendLine("                System.Collections.Generic.List<System.Data.DataColumn> result =");
            sb.Append("                    new System.Collections.Generic.List<System.Data.DataColumn>");

            var baseClassProperties = classInfo.BaseClassProperties;
            if (baseClassProperties != null && baseClassProperties.Length > 0)
            {
                sb.Append("                (base.GetDataColumns())");
            }

            sb.AppendLine(string.Empty);
            sb.AppendLine("                {");

            var properties = classInfo.Properties;
            for (int i = 0; i < properties.Length; i++)
            {
                sb.AppendLine(
                    "                    new System.Data.DataColumn(\"" + properties[i].Name + "\", typeof("
                    + properties[i].NetDataType + "))" + (i < properties.Length - 1 ? "," : string.Empty));
            }

            sb.AppendLine("                };");
            sb.AppendLine(string.Empty);

            sb.AppendLine("                return result.ToArray();");
            sb.AppendLine("            }");
        }

        /// <summary>
        /// Generates the code that gets the row data for reading a data reader into a strongly typed class
        /// </summary>
        /// <param name="sb">
        /// The String Builder to add the code to
        /// </param>
        /// <param name="properties">
        /// The collection of properties for the class
        /// </param>
        protected void DoViewFilterGetRowData(StringBuilder sb, Base[] properties)
        {
            if (sb == null)
            {
                throw new ArgumentNullException("sb");
            }

            if (properties == null)
            {
                throw new ArgumentNullException("properties");
            }

            foreach (Base pi in properties.Where(pi => pi.SqlDataReaderType != null))
            {
                sb.AppendLine("            bool " + Common.GetVariableName(pi.Name) + " =");
                sb.AppendLine(
                    "                (" + Common.GetVariableName(pi.Name) + "Ordinal > -1) && (dataReader.GetBoolean("
                    + Common.GetVariableName(pi.Name) + "Ordinal));");
                sb.AppendLine(string.Empty);
            }
        }

        /// <summary>
        /// Generates the code that gets the row data for reading a data reader into a strongly typed class
        /// </summary>
        /// <param name="sb">
        /// The String Builder to add the code to
        /// </param>
        /// <param name="properties">
        /// The collection of properties for the class
        /// </param>
        protected void DoDifferenceGetRowData(StringBuilder sb, Base[] properties)
        {
            if (sb == null)
            {
                throw new ArgumentNullException("sb");
            }

            if (properties == null)
            {
                throw new ArgumentNullException("properties");
            }

            foreach (var pi in properties.Where(pi => pi.SqlDataReaderType != null))
            {
                sb.AppendLine("            bool " + Common.GetVariableName("row" + pi.Name) + " = false;");
                sb.AppendLine("            if (" + Common.GetVariableName(pi.Name) + "Ordinal > -1)");
                sb.AppendLine("            {");
                sb.AppendLine(
                    "                " + Common.GetVariableName("row" + pi.Name) + " = dataReader.GetBoolean("
                    + Common.GetVariableName(pi.Name) + "Ordinal);");
                sb.AppendLine("            }");
                sb.AppendLine(string.Empty);
            }
        }

        /// <summary>
        /// Generates the code that gets the row data for reading a data reader into a strongly typed class
        /// </summary>
        /// <param name="sb">
        /// The String Builder to add the code to
        /// </param>
        /// <param name="properties">
        /// The collection of properties for the class
        /// </param>
        protected void DoInformationClassGetRowData(StringBuilder sb, Base[] properties)
        {
            if (sb == null)
            {
                throw new ArgumentNullException("sb");
            }

            if (properties == null)
            {
                throw new ArgumentNullException("properties");
            }

            foreach (Base pi in properties)
            {
                if (pi.SqlDataReaderType == null)
                {
                    continue;
                }

                string optional = null;
                if (pi.Optional && !pi.NetDataType.Equals("string", StringComparison.Ordinal))
                {
                    optional = "?";
                }

                sb.AppendLine(
                    "            " + pi.GetCSharpDataTypeDeclaration() + optional + " "
                    + Common.GetVariableName("row" + pi.Name) + " = " + (pi.Optional ? "null" : pi.DefaultValue) + ";");
                sb.AppendLine("            if (" + Common.GetVariableName(pi.Name) + "Ordinal > -1)");
                sb.AppendLine("            {");
                if (pi.Optional)
                {
                    sb.AppendLine(
                        "                if (!dataReader.IsDBNull(" + Common.GetVariableName(pi.Name) + "Ordinal))");
                    sb.AppendLine("                {");

                    sb.AppendLine(
                        "                    " + Common.GetVariableName("row" + pi.Name) + " = "
                        + (pi.RequiresSqlMapping ? "(" + pi.GetCSharpDataTypeDeclaration() + ")" : null)
                        + "dataReader.Get" + pi.SqlDataReaderType + "(" + Common.GetVariableName(pi.Name) + "Ordinal);");
                    sb.AppendLine("                }");
                }
                else
                {
                    sb.AppendLine(
                        "                " + Common.GetVariableName("row" + pi.Name) + " = "
                        + (pi.RequiresSqlMapping ? "(" + pi.GetCSharpDataTypeDeclaration() + ")" : null)
                        + "dataReader.Get" + pi.SqlDataReaderType + "(" + Common.GetVariableName(pi.Name) + "Ordinal);");
                }

                sb.AppendLine("            }");
                sb.AppendLine(string.Empty);
            }
        }

        /// <summary>
        /// The do get strongly typed object from data reader row method.
        /// </summary>
        /// <param name="sb">
        /// The String Builder to add the code to
        /// </param>
        /// <param name="classInfo">
        /// The class Info.
        /// </param>
        /// <param name="doGetRowDataMethod">
        /// The do Get Row Data Method.
        /// </param>
        /// <param name="classSuffix">
        /// class suffix (used for difference class, etc.)
        /// </param>
        protected virtual void DoGetStronglyTypedObjectFromDataReaderRowMethod(
            StringBuilder sb,
            IClassGenerationParameters classInfo,
            Action<StringBuilder, Base[]> doGetRowDataMethod,
            string classSuffix)
        {
            var fullyQualifiedClassName = classInfo.MainNamespaceName + ".Model.Info." + (!string.IsNullOrWhiteSpace(classInfo.SubNamespace) ? classInfo.SubNamespace + "." : null) + classInfo.ClassName;

            var properties = classInfo.Properties;
            if (properties == null || properties.Length < 1)
            {
                throw new ArgumentException("classInfo.properties");
            }

            var baseClassProperties = classInfo.BaseClassProperties;

            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// Get Strongly Typed Object from a data reader");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        /// <param name=\"dataReader\">");
            sb.AppendLine("        /// The data Reader.");
            sb.AppendLine("        /// </param>");
            sb.AppendLine("        /// <returns>");
            sb.AppendLine("        /// strongly typed object.");
            sb.AppendLine("        /// </returns>");
            sb.AppendLine(
                "        public override " + fullyQualifiedClassName + classSuffix
                + " GetStronglyTypedObjectFromDataReaderRow(System.Data.IDataReader dataReader)");
            sb.AppendLine("        {");

            if (baseClassProperties != null && baseClassProperties.Length > 0)
            {
                if (baseClassProperties.Any(pi => pi.SqlDataReaderType == null || pi.Collection != CollectionType.None))
                {
                    sb.AppendLine("            throw new NotImplementedException();");
                    sb.AppendLine("        }");
                    return;
                }
            }

            if (properties.Any(pi => pi.SqlDataReaderType == null || pi.Collection != CollectionType.None))
            {
                sb.AppendLine("            throw new NotImplementedException();");
                sb.AppendLine("        }");
                return;
            }

            sb.AppendLine("            if (dataReader == null)");
            sb.AppendLine("            {");
            sb.AppendLine("                throw new ArgumentNullException(\"dataReader\");");
            sb.AppendLine("            }");
            sb.AppendLine(string.Empty);

            sb.AppendLine("            // get ordinals");
            if (baseClassProperties != null && baseClassProperties.Length > 0)
            {
                DoGetOrdinals(sb, baseClassProperties);
            }

            DoGetOrdinals(sb, properties);
            sb.AppendLine(string.Empty);

            sb.AppendLine("            // get row data");
            if (baseClassProperties != null && baseClassProperties.Length > 0)
            {
                doGetRowDataMethod(sb, baseClassProperties);
            }

            doGetRowDataMethod(sb, properties);

            sb.AppendLine("            return new " + fullyQualifiedClassName + classSuffix + "(");
            if (baseClassProperties != null && baseClassProperties.Length > 0)
            {
                sb.AppendLine(
                    "                " + Common.GetVariableName("row" + baseClassProperties[0].Name)
                    + (baseClassProperties.Length > 1 ? "," : string.Empty));
                for (int i = 1; i < baseClassProperties.Length; i++)
                {
                    sb.AppendLine(
                        "                " + Common.GetVariableName("row" + baseClassProperties[i].Name) + ",");
                }
            }

            for (int i = 0; i < properties.Length; i++)
            {
                sb.AppendLine(
                    "                " + Common.GetVariableName("row" + properties[i].Name)
                    + (i < properties.Length - 1 ? "," : ");"));
            }

            sb.AppendLine("        }");
        }

        /// <summary>
        /// Generates the code for the our methods region
        /// </summary>
        /// <param name="sb">
        /// StringBuilder to add the code to
        /// </param>
        /// <param name="classes">
        /// Collection of classes to generate helpers for
        /// </param>
        private void DoOurMethodsRegion(
            StringBuilder sb,
            IEnumerable<IClassGenerationParameters> classes)
        {
            foreach (var classInfo in classes)
            {
                var fullyQualifiedClassName = classInfo.MainNamespaceName + ".Model.Info." + (!string.IsNullOrWhiteSpace(classInfo.SubNamespace) ? classInfo.SubNamespace + "." : null) + classInfo.ClassName;

                sb.AppendLine("    /// <summary>");
                sb.AppendLine("    /// Helper methods for using POCO and low level ADO.NET");
                sb.AppendLine("    /// </summary>");
                sb.AppendLine("    public class " + classInfo.ClassName + "AdoNetHelper");
                sb.AppendLine("                : Dhgms.DataManager.Model.Helper.AdoNet.AdoNetBase<" + fullyQualifiedClassName + ">");
                sb.AppendLine("    {");

                sb.AppendLine("        #region our methods");
                sb.AppendLine(string.Empty);

                this.DoGetDataColumnsMethod(sb, classInfo);
                this.DoGetStronglyTypedObjectFromDataReaderRowMethod(sb, classInfo, this.DoInformationClassGetRowData, null);

                sb.AppendLine("        #endregion");

                sb.AppendLine("    }");
                sb.AppendLine(string.Empty);
            }
        }
    }
}
